<!-- File d'Ariane -->
<nav class="text-gray-500 mb-6" aria-label="Breadcrumb">
    <ol class="list-reset flex">
        <li><a href="/admin" class="text-blue-500 hover:underline">Tableau de bord</a></li>
        <li><span class="mx-2">/</span></li>
        <li class="text-gray-600">Liste des Utilisateurs</li>
    </ol>
</nav>

<!-- Section Liste des Utilisateurs -->
<section id="user-list" class="mb-8">
    <div class="bg-white rounded-lg shadow p-4">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-2xl font-bold">Liste des Utilisateurs</h2>
            <!-- Bouton Ajouter un utilisateur -->
            <button id="addUser" class="bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700">Ajouter un utilisateur</button>
        </div>

        <table class="min-w-full bg-white">
            <thead>
            <tr>
                <th class="py-2 px-4 bg-gray-200 text-left text-sm font-semibold text-gray-600">Nom</th>
                <th class="py-2 px-4 bg-gray-200 text-left text-sm font-semibold text-gray-600">Prénom</th>
                <th class="py-2 px-4 bg-gray-200 text-left text-sm font-semibold text-gray-600">Nom d'utilisateur</th>
                <th class="py-2 px-4 bg-gray-200 text-left text-sm font-semibold text-gray-600">Compte créé le</th>
                <th class="py-2 px-4 bg-gray-200 text-left text-sm font-semibold text-gray-600">Grades</th>
                <th class="py-2 px-4 bg-gray-200 text-left text-sm font-semibold text-gray-600">Actions</th>
            </tr>
            </thead>
            <tbody>
            {{#each users}}
                <tr>
                    <td class="py-2 px-4 border-b">{{this.lastName}}</td>
                    <td class="py-2 px-4 border-b">{{this.firstName}}</td>
                    <td class="py-2 px-4 border-b">{{this.username}}</td>
                    <td class="py-2 px-4 border-b">{{formatDateTime this.createdAt}}</td>
                    <td class="py-2 px-4 border-b">
                        {{#each this.roles}}
                            <span class="inline-block bg-red-200 text-red-800 text-xs font-semibold px-2 py-1 rounded-full mr-1">
                                {{this}}
                            </span>
                        {{/each}}
                    </td>
                    <td class="py-2 px-4 border-b">
                        <a href="/admin/users/{{this.uuid}}" class="inline-flex items-center text-blue-500 hover:underline">
                            <i data-feather="edit" class="w-4 h-4 mr-1"></i>Éditer
                        </a>
                    </td>
                </tr>
            {{/each}}
            </tbody>
        </table>
    </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    feather.replace(); // Initialisation des icônes feather
    const addUserButton = document.getElementById("addUser");

    if (addUserButton) {
        addUserButton.addEventListener('click', function () {
            Swal.fire({
                title: 'Ajouter un utilisateur',
                html: `
                    <div>
                        <input type="hidden" name="_csrf" value="{{csrfToken}}">
                        <label for="username" class="block text-left">Nom d'utilisateur :</label>
                        <input type="text" id="username" class="w-full p-2 border rounded-lg" placeholder="Nom d'utilisateur">

                        <label for="lastName" class="block text-left mt-4">Nom :</label>
                        <input type="text" id="lastName" class="w-full p-2 border rounded-lg" placeholder="Nom">

                        <label for="firstName" class="block text-left mt-4">Prénom :</label>
                        <input type="text" id="firstName" class="w-full p-2 border rounded-lg" placeholder="Prénom">

                        <label for="email" class="block text-left mt-4">Email :</label>
                        <input type="email" id="email" class="w-full p-2 border rounded-lg" placeholder="Email">

                        <label for="phone" class="block text-left mt-4">Téléphone :</label>
                        <input type="text" id="phone" class="w-full p-2 border rounded-lg" placeholder="Téléphone">

                        <label for="password" class="block text-left mt-4">Mot de passe :</label>
                        <input type="password" id="password" class="w-full p-2 border rounded-lg" placeholder="Mot de passe">

                        <label for="roles" class="block text-left mt-4">Grades :</label>
                        <select id="roles" multiple class="w-full p-2 border rounded-lg">
                            {{#each allRoles}}
                                <option value="{{this.name}}">{{this.name}}</option>
                            {{/each}}
                        </select>
                        <p class="text-sm text-gray-500 mt-1">Maintenez la touche "Ctrl" (Windows) ou "Cmd" (Mac) pour sélectionner plusieurs grades.</p>
                    </div>
                `,
                showCancelButton: true,
                confirmButtonText: 'Créer l\'utilisateur',
                cancelButtonText: 'Annuler',
                preConfirm: () => {
                    const username = document.getElementById('username').value;
                    const lastName = document.getElementById('lastName').value;
                    const firstName = document.getElementById('firstName').value;
                    const email = document.getElementById('email').value;
                    const phone = document.getElementById('phone').value;
                    const password = document.getElementById('password').value;
                    const roles = Array.from(document.getElementById('roles').selectedOptions).map(option => option.value);

                    if (!username || !lastName || !firstName || !email || !password || roles.length === 0) {
                        Swal.showValidationMessage('Veuillez remplir tous les champs.');
                    }

                    return { username, lastName, firstName, email, phone, password, roles };
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const { username, lastName, firstName, email, phone, password, roles } = result.value;

                    fetch('/api/users/new', {
                        method: 'POST',
                        headers: {
                            'CSRF-Token': document.querySelector('input[name="_csrf"]').value,
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ username, lastName, firstName, email, phone, password, roles })
                    }).then(response => response.json()).then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: 'Utilisateur créé',
                                text: 'L\'utilisateur a été créé avec succès.',
                                icon: 'success',
                                confirmButtonText: 'Fermer'
                            }).then(() => window.location.reload());
                        } else {
                            Swal.fire({
                                title: 'Erreur',
                                text: data.message || 'Une erreur est survenue lors de la création de l\'utilisateur.',
                                icon: 'error',
                                confirmButtonText: 'Fermer'
                            });
                        }
                    }).catch(() => {
                        Swal.fire({
                            title: 'Erreur',
                            text: 'Une erreur réseau est survenue.',
                            icon: 'error',
                            confirmButtonText: 'Fermer'
                        });
                    });
                }
            });
        });
    }
</script>
